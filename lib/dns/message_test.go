// Copyright 2018, Shulhan <ms@kilabit.info>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package dns

import (
	"testing"

	"github.com/shuLhan/share/lib/test"
)

func TestMessageIsExpired(t *testing.T) {
	cases := []struct {
		desc string
		msg  *Message
		exp  bool
	}{{
		desc: "Message is not expired",
		msg: &Message{
			Answer: []ResourceRecord{{
				TTL: 1,
			}},
		},
		exp: false,
	}, {
		desc: "Message is expired",
		msg: &Message{
			Answer: []ResourceRecord{{
				TTL: 0,
			}},
		},
		exp: true,
	}}

	for _, c := range cases {
		t.Log(c.desc)

		got := c.msg.IsExpired()

		test.Assert(t, "IsExpired", c.exp, got)
	}
}

func TestMessagePackDomainName(t *testing.T) {
	cases := []struct {
		in  []byte
		exp []byte
	}{{
		in:  []byte("a.b"),
		exp: []byte{1, 'a', 1, 'b', 0},
	}, {
		in:  []byte("a.b."),
		exp: []byte{1, 'a', 1, 'b', 0},
	}, {
		in:  []byte("a\\.b.c"),
		exp: []byte{3, 'a', '.', 'b', 1, 'c', 0},
	}, {
		in:  []byte("a\\065.b.c"),
		exp: []byte{2, 'a', 'a', 1, 'b', 1, 'c', 0},
	}, {
		in:  []byte("a\\065"),
		exp: []byte{2, 'a', 'a', 0},
	}}

	msg := NewMessage()
	msg.dnameOff = make(map[string]uint16)

	for _, c := range cases {
		msg.Reset()
		msg.packet = msg.packet[:0]

		msg.packDomainName(c.in, false)

		test.Assert(t, "packDomainName", c.exp, msg.packet)
	}
}

func TestMessagePackQuestion(t *testing.T) {
	cases := []struct {
		desc string
		msg  *Message
		exp  []byte
	}{{
		desc: "Empty name",
		msg: &Message{
			Question: MessageQuestion{
				Type:  RecordTypeA,
				Class: RecordClassIN,
			},
			dnameOff: make(map[string]uint16),
		},
		exp: []byte{
			0x00, 0x00, 0x01, 0x00, 0x01,
		},
	}, {
		desc: "Single domain name",
		msg: &Message{
			Question: MessageQuestion{
				Name:  "kilaBit",
				Type:  RecordTypeA,
				Class: RecordClassIN,
			},
			dnameOff: make(map[string]uint16),
		},
		exp: []byte{
			0x07, 'k', 'i', 'l', 'a', 'b', 'i', 't', 0x00,
			0x00, 0x01, 0x00, 0x01,
		},
	}, {
		desc: "Two domain names",
		msg: &Message{
			Question: MessageQuestion{
				Name:  "kilabit.info",
				Type:  RecordTypeA,
				Class: RecordClassIN,
			},
			dnameOff: make(map[string]uint16),
		},
		exp: []byte{
			0x07, 'k', 'i', 'l', 'a', 'b', 'i', 't',
			0x04, 'i', 'n', 'f', 'o',
			0x00,
			0x00, 0x01, 0x00, 0x01,
		},
	}, {
		desc: "Three domain names",
		msg: &Message{
			Question: MessageQuestion{
				Name:  "MAIL.KILABIT.INFO",
				Type:  RecordTypeA,
				Class: RecordClassIN,
			},
			dnameOff: make(map[string]uint16),
		},
		exp: []byte{
			0x04, 'm', 'a', 'i', 'l',
			0x07, 'k', 'i', 'l', 'a', 'b', 'i', 't',
			0x04, 'i', 'n', 'f', 'o',
			0x00,
			0x00, 0x01, 0x00, 0x01,
		},
	}}

	for _, c := range cases {
		t.Log(c.desc)

		c.msg.packQuestion()

		test.Assert(t, "packet", c.exp, c.msg.packet)
	}
}

func TestMessagePack(t *testing.T) {
	cases := []struct {
		desc string
		msg  *Message
		exp  []byte
	}{{
		desc: "Simple query",
		msg: &Message{
			Header: MessageHeader{
				ID:      1,
				IsQuery: true,
				QDCount: 1,
			},
			Question: MessageQuestion{
				Name:  "kilabit.INFO",
				Type:  RecordTypeA,
				Class: RecordClassIN,
			},
			dnameOff: make(map[string]uint16),
		},
		exp: []byte{
			0, 1,
			0, 0,
			0, 1, // QDCount
			0, 0,
			0, 0,
			0, 0,
			7, 'k', 'i', 'l', 'a', 'b', 'i', 't',
			4, 'i', 'n', 'f', 'o',
			0,
			0, 1,
			0, 1,
		},
	}, {
		desc: "Response with A RDATA",
		msg: &Message{
			Header: MessageHeader{
				ID:      0x8cdb,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 1,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "kilabit.info",
				Type:  RecordTypeA,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "KILABIT.INFO",
				Type:  RecordTypeA,
				Class: RecordClassIN,
				TTL:   0x00000168,
				Value: "103.200.4.162",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 0x0500,
				TTL:   0,
				Value: &RDataOPT{},
			}},
			dnameOff: make(map[string]uint16),
		},
		exp: []byte{
			// Header
			0x8c, 0xdb, 0x81, 0x80,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
			// Question
			0x07, 0x6b, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x74,
			0x04, 0x69, 0x6e, 0x66, 0x6f, 0x00,
			0x00, 0x01, 0x00, 0x01,
			// Answer
			0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01,
			0x00, 0x00, 0x01, 0x68,
			0x00, 0x04,
			0x67, 0xc8, 0x04, 0xa2,
			// OPT
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
	}, {
		desc: "Response with NS RDATA",
		exp: []byte{
			// Header
			0xd4, 0xa6, 0x81, 0x80,
			0x00, 0x01, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x01,

			// Question
			0x07, 0x6b, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x74,
			0x04, 0x69, 0x6e, 0x66, 0x6f, 0x00,
			0x00, 0x02, 0x00, 0x01,

			// Answer #1 - NS IN
			0xc0, 0x0c,
			0x00, 0x02, 0x00, 0x01,
			0x00, 0x01, 0x33, 0x6e,
			0x00, 0x11,
			0x03, 0x6e, 0x73, 0x32,
			0x07, 0x64, 0x65, 0x77, 0x61, 0x77, 0x65, 0x62,
			0x03, 0x63, 0x6f, 0x6d, 0x00,

			// Answer #2
			0xc0, 0x0c,
			0x00, 0x02, 0x00, 0x01,
			0x00, 0x01, 0x33, 0x6e,
			0x00, 0x06,
			0x03, 0x6e, 0x73, 0x33, 0xc0, 0x2e,

			// Answer #3
			0xc0, 0x0c,
			0x00, 0x02, 0x00, 0x01,
			0x00, 0x01, 0x33, 0x6e,
			0x00, 0x06,
			0x03, 0x6e, 0x73, 0x31, 0xc0, 0x2e,

			// Additional OPT
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		msg: &Message{
			Header: MessageHeader{
				ID:      0xd4a6,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 3,
				NSCount: 0,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "kilabit.info",
				Type:  RecordTypeNS,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "kilabit.info",
				Type:  RecordTypeNS,
				Class: RecordClassIN,
				TTL:   0x01336e,
				Value: "ns2.dewaweb.com",
			}, {
				Name:  "kilabit.INFO",
				Type:  RecordTypeNS,
				Class: RecordClassIN,
				TTL:   0x01336e,
				Value: "NS3.DEWAWEB.COM",
			}, {
				Name:  "kilabit.info",
				Type:  RecordTypeNS,
				Class: RecordClassIN,
				TTL:   0x01336e,
				Value: "ns1.dewaweb.com",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 0x0500,
				TTL:   0,
				Value: &RDataOPT{},
			}},
		},
	}, {
		desc: "Response with CNAME RDATA",
		exp: []byte{
			// Header
			0x8a, 0x38, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01,

			// Question
			0x04, 0x6d, 0x61, 0x69, 0x6c,
			0x07, 0x6b, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x74,
			0x04, 0x69, 0x6e, 0x66, 0x6f, 0x00,
			0x00, 0x05, 0x00, 0x01,

			// Answer
			0xc0, 0x0c,
			0x00, 0x05, 0x00, 0x01,
			0x00, 0x00, 0x01, 0x68,
			0x00, 0x02,
			0xc0, 0x11,

			// Additional
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		msg: &Message{
			Header: MessageHeader{
				ID:      0x8a38,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 1,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "mail.kilabit.info",
				Type:  RecordTypeCNAME,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "mail.kilabit.info",
				Type:  RecordTypeCNAME,
				Class: RecordClassIN,
				TTL:   0x0168,
				Value: "kilabit.info",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 0x0500,
				TTL:   0,
				Value: &RDataOPT{},
			}},
		},
	}, {
		desc: "Response with SOA RDATA",
		exp: []byte{
			0x00, 0x02, 0x80, 0x80, 0x00, 0x01, 0x00, 0x01, //  0 -
			0x00, 0x00, 0x00, 0x00, 0x07, 0x6b, 0x69, 0x6c, //  8 -   0   0 7 k i l
			0x61, 0x62, 0x69, 0x74, 0x04, 0x69, 0x6e, 0x66, // 16 - a b i t 4 i n f
			0x6f, 0x00, 0x00, 0x06, 0x00, 0x01, 0xc0, 0x0c, // 24 - o 0   6   1 ^ 20
			0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x29, 0x0f, // 32
			0x00, 0x38, 0x03, 0x6e, 0x73, 0x31, 0x07, 0x64, // 40
			0x65, 0x77, 0x61, 0x77, 0x65, 0x62, 0x03, 0x63, // 48
			0x6f, 0x6d, 0x00, 0x07, 0x6d, 0x6f, 0x6e, 0x69, // 56
			0x74, 0x6f, 0x72, 0x08, 0x64, 0x65, 0x77, 0x61,
			0x68, 0x6f, 0x73, 0x74, 0xc0, 0x36, 0x78, 0x3a,
			0x3c, 0x85, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00,
			0x1c, 0x20, 0x00, 0x12, 0x75, 0x00, 0x00, 0x01,
			0x51, 0x80,
		},
		msg: &Message{
			Header: MessageHeader{
				ID:      2,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRA:    true,
				QDCount: 1,
			},
			Question: MessageQuestion{
				Name:  "kilabit.info",
				Type:  RecordTypeSOA,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "kilabit.info",
				Type:  RecordTypeSOA,
				Class: RecordClassIN,
				TTL:   10511,
				Value: &RDataSOA{
					MName:   "ns1.dewaweb.com",
					RName:   "MONITOR.dewahost.com",
					Serial:  2017082501,
					Refresh: 3600,
					Retry:   7200,
					Expire:  1209600,
					Minimum: 86400,
				},
			}},
			dnameOff: make(map[string]uint16),
		},
	}, {
		desc: "Response with MX RDATA",
		exp: []byte{
			0x9e, 0xef, 0x81, 0x80,
			0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01,
			// Question
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x0f, 0x00, 0x01,
			// Answer #1
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x11,
			0x00, 0x28,
			0x04, 0x61, 0x6c, 0x74, 0x33,
			0x05, 0x61, 0x73, 0x70, 0x6d, 0x78,
			0x01, 0x6c,
			0xc0, 0x0c,
			// Answer #2
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x04,
			0x00, 0x0a,
			0xc0, 0x2f,
			// Answer #3
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x09,
			0x00, 0x14,
			0x04, 0x61, 0x6c, 0x74, 0x31,
			0xc0, 0x2f,
			// Answer #4
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x09,
			0x00, 0x1e,
			0x04, 0x61, 0x6c, 0x74, 0x32,
			0xc0, 0x2f,
			// Answer #5
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x09,
			0x00, 0x32,
			0x04, 0x61, 0x6c, 0x74, 0x34,
			0xc0, 0x2f,
			// OPT
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		msg: &Message{
			Header: MessageHeader{
				ID:      0x9eef,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 5,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				Value: &RDataMX{
					Preference: 0x28,
					Exchange:   "alt3.aspmx.l.google.com",
				},
			}, {
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				Value: &RDataMX{
					Preference: 0x0a,
					Exchange:   "aspmx.l.google.com",
				},
			}, {
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				Value: &RDataMX{
					Preference: 0x14,
					Exchange:   "alt1.aspmx.l.google.com",
				},
			}, {
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				Value: &RDataMX{
					Preference: 0x1e,
					Exchange:   "alt2.aspmx.l.google.com",
				},
			}, {
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				Value: &RDataMX{
					Preference: 0x32,
					Exchange:   "alt4.aspmx.l.GOOGLE.COM",
				},
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 0x0500,
				TTL:   0,
				Value: &RDataOPT{},
			}},
		},
	}, {
		desc: "Response with TXT RDATA",
		exp: []byte{
			0x3f, 0x7d, 0x81, 0x80, 0x00, 0x01, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x01, 0x06, 0x67, 0x6f, 0x6f,
			0x67, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x10, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x10,
			0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x3c,
			0x3b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
			0x6b, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
			0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
			0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x32,
			0x72, 0x6d, 0x35, 0x35, 0x31, 0x63, 0x75, 0x34,
			0x6b, 0x30, 0x61, 0x62, 0x30, 0x62, 0x78, 0x73,
			0x77, 0x35, 0x33, 0x36, 0x74, 0x6c, 0x64, 0x73,
			0x34, 0x68, 0x39, 0x35, 0xc0, 0x0c, 0x00, 0x10,
			0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x24,
			0x23, 0x76, 0x3d, 0x73, 0x70, 0x66, 0x31, 0x20,
			0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x3a,
			0x5f, 0x73, 0x70, 0x66, 0x2e, 0x67, 0x6f, 0x6f,
			0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20,
			0x7e, 0x61, 0x6c, 0x6c, 0xc0, 0x0c, 0x00, 0x10,
			0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x2e,
			0x2d, 0x64, 0x6f, 0x63, 0x75, 0x73, 0x69, 0x67,
			0x6e, 0x3d, 0x30, 0x35, 0x39, 0x35, 0x38, 0x34,
			0x38, 0x38, 0x2d, 0x34, 0x37, 0x35, 0x32, 0x2d,
			0x34, 0x65, 0x66, 0x32, 0x2d, 0x39, 0x35, 0x65,
			0x62, 0x2d, 0x61, 0x61, 0x37, 0x62, 0x61, 0x38,
			0x61, 0x33, 0x62, 0x64, 0x30, 0x65,
			0x00, 0x00, 0x29, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		msg: &Message{
			Header: MessageHeader{
				ID:      16253,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
			},
			Question: MessageQuestion{
				Name:  "google.com",
				Type:  RecordTypeTXT,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "google.com",
				Type:  RecordTypeTXT,
				Class: RecordClassIN,
				TTL:   300,
				Value: "facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95",
			}, {
				Name:  "google.com",
				Type:  RecordTypeTXT,
				Class: RecordClassIN,
				TTL:   300,
				Value: "v=spf1 include:_spf.google.com ~all",
			}, {
				Name:  "google.com",
				Type:  RecordTypeTXT,
				Class: RecordClassIN,
				TTL:   300,
				Value: "docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 1280,
				TTL:   0,
				Value: &RDataOPT{},
			}},
			dnameOff: make(map[string]uint16),
		},
	}, {
		desc: "Response with AAAA RDATA",
		exp: []byte{
			0x2c, 0x90, 0x81, 0x80,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
			// Question
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x1c, 0x00, 0x01,
			// Answer
			0xc0, 0x0c,
			0x00, 0x1c, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x53,
			0x00, 0x10,
			0x24, 0x04, 0x68, 0x00, 0x40, 0x03, 0x0c, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b,
			// OPT
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		msg: &Message{
			Header: MessageHeader{
				ID:      0x2c90,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 1,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "google.com",
				Type:  RecordTypeAAAA,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "google.com",
				Type:  RecordTypeAAAA,
				TTL:   0x53,
				Class: RecordClassIN,
				Value: "2404:6800:4003:c00::8b",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 1280,
				TTL:   0,
				Value: &RDataOPT{},
			}},
		},
	}, {
		desc: "Response with SRV RDATA",
		exp: []byte{
			0x2c, 0xb4,
			0x81, 0x80,
			0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01,
			// Question
			0x0c, 0x5f, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x04, 0x5f, 0x74, 0x63, 0x70,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x21, 0x00, 0x01,
			// Answer #1
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x20,
			0x00, 0x05, 0x00, 0x00, 0x14, 0x95,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// Answer #2
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x25,
			0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
			0x04, 0x61, 0x6c, 0x74, 0x31,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// Answer #3
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x25,
			0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
			0x04, 0x61, 0x6c, 0x74, 0x32,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// Answer #4
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x25,
			0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
			0x04, 0x61, 0x6c, 0x74, 0x34,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// Answer #5
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x25,
			0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
			0x04, 0x61, 0x6c, 0x74, 0x33,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// OPT
			0x00, 0x00, 0x29, 0x02, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		msg: &Message{
			Header: MessageHeader{
				ID:      0x2cb4,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 5,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x5,
					Weight:   0,
					Port:     0x1495,
					Target:   "xmpp-server.l.google.com",
				},
			}, {
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x14,
					Weight:   0,
					Port:     0x1495,
					Target:   "alt1.xmpp-server.l.google.com",
				},
			}, {
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x14,
					Weight:   0,
					Port:     0x1495,
					Target:   "alt2.xmpp-server.l.google.com",
				},
			}, {
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x14,
					Weight:   0,
					Port:     0x1495,
					Target:   "alt4.xmpp-server.l.google.com",
				},
			}, {
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x14,
					Weight:   0,
					Port:     0x1495,
					Target:   "alt3.xmpp-server.l.google.com",
				},
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 512,
				TTL:   0,
				Value: &RDataOPT{},
			}},
		},
	}}

	for _, c := range cases {
		t.Log(c.desc)

		got, _ := c.msg.Pack()

		t.Logf("Message: %+v\n", c.msg)
		test.Assert(t, c.desc, c.exp, got)
	}
}

func TestMessageSetAuthoritativeAnswer(t *testing.T) {
	msgQuery := &Message{
		Header: MessageHeader{
			ID:      1,
			IsQuery: true,
			IsAA:    true,
			IsRD:    true,
		},
		Question: MessageQuestion{},
		packet:   make([]byte, maxUdpPacketSize),
		dnameOff: make(map[string]uint16),
	}

	_, err := msgQuery.Pack()
	if err != nil {
		t.Fatal(err)
	}

	msgResponse := &Message{
		Header: MessageHeader{
			ID:   1,
			IsAA: true,
			IsRD: true,
			IsRA: true,
		},
		Question: MessageQuestion{},
		packet:   make([]byte, maxUdpPacketSize),
		dnameOff: make(map[string]uint16),
	}

	_, err = msgResponse.Pack()
	if err != nil {
		t.Fatal(err)
	}

	cases := []struct {
		desc string
		msg  *Message
		isAA bool
		exp  []byte
	}{{
		desc: "With query and isAA is false",
		msg:  msgQuery,
		exp:  []byte{0x00, 0x01, 0x01, 0x00},
	}, {
		desc: "With query and isAA is true",
		msg:  msgQuery,
		isAA: true,
		exp:  []byte{0x00, 0x01, 0x05, 0x00},
	}, {
		desc: "With response and isAA is false",
		msg:  msgResponse,
		exp:  []byte{0x00, 0x01, 0x81, 0x80},
	}, {
		desc: "With response and isAA is true",
		msg:  msgResponse,
		isAA: true,
		exp:  []byte{0x00, 0x01, 0x85, 0x80},
	}}

	for _, c := range cases {
		t.Log(c.desc)

		c.msg.SetAuthorativeAnswer(c.isAA)

		test.Assert(t, "Message.packet header", c.exp, c.msg.packet[:4])
	}
}

func TestMessageSetQuery(t *testing.T) {
	msgQuery := &Message{
		Header: MessageHeader{
			ID:      1,
			IsQuery: true,
			IsAA:    true,
			IsRD:    true,
		},
		Question: MessageQuestion{},
		packet:   make([]byte, maxUdpPacketSize),
		dnameOff: make(map[string]uint16),
	}

	_, err := msgQuery.Pack()
	if err != nil {
		t.Fatal(err)
	}

	cases := []struct {
		desc    string
		msg     *Message
		isQuery bool
		exp     []byte
	}{{
		desc: "With isQuery is false",
		msg:  msgQuery,
		exp:  []byte{0x00, 0x01, 0x81, 0x00},
	}, {
		desc:    "With isQuery is true",
		msg:     msgQuery,
		isQuery: true,
		exp:     []byte{0x00, 0x01, 0x01, 0x00},
	}}

	for _, c := range cases {
		t.Log(c.desc)

		c.msg.SetQuery(c.isQuery)

		test.Assert(t, "Message.packet header", c.exp, c.msg.packet[:4])
	}
}

func TestMessageSetRecursionDesired(t *testing.T) {
	msgQuery := &Message{
		Header: MessageHeader{
			ID:      1,
			IsQuery: true,
			IsAA:    true,
			IsRD:    true,
		},
		Question: MessageQuestion{},
		packet:   make([]byte, maxUdpPacketSize),
		dnameOff: make(map[string]uint16),
	}

	_, err := msgQuery.Pack()
	if err != nil {
		t.Fatal(err)
	}

	cases := []struct {
		desc string
		msg  *Message
		isRD bool
		exp  []byte
	}{{
		desc: "With isRD is false",
		msg:  msgQuery,
		exp:  []byte{0x00, 0x01, 0x00, 0x00},
	}, {
		desc: "With isRD is true",
		msg:  msgQuery,
		isRD: true,
		exp:  []byte{0x00, 0x01, 0x01, 0x00},
	}}

	for _, c := range cases {
		t.Log(c.desc)

		c.msg.SetRecursionDesired(c.isRD)

		test.Assert(t, "Message.packet header", c.exp, c.msg.packet[:4])
	}
}

func TestMessageSetResponseCode(t *testing.T) {
	msgQuery := &Message{
		Header: MessageHeader{
			ID:      1,
			IsQuery: true,
			IsAA:    true,
			IsRD:    true,
		},
		Question: MessageQuestion{},
		packet:   make([]byte, maxUdpPacketSize),
		dnameOff: make(map[string]uint16),
	}

	_, err := msgQuery.Pack()
	if err != nil {
		t.Fatal(err)
	}

	cases := []struct {
		desc string
		msg  *Message
		code ResponseCode
		exp  []byte
	}{{
		desc: "With code is error format",
		msg:  msgQuery,
		code: RCodeErrName,
		exp:  []byte{0x00, 0x01, 0x01, 0x03},
	}, {
		desc: "With code is 0",
		msg:  msgQuery,
		code: 0,
		exp:  []byte{0x00, 0x01, 0x01, 0x00},
	}}

	for _, c := range cases {
		t.Log(c.desc)

		c.msg.SetResponseCode(c.code)

		test.Assert(t, "Message.packet header", c.exp, c.msg.packet[:4])
	}
}

func TestMessageUnpack(t *testing.T) {
	cases := []struct {
		desc   string
		packet []byte
		exp    *Message
	}{{
		desc: "RR with A",
		packet: []byte{
			// Header
			0x8c, 0xdb, 0x81, 0x80,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
			// Question
			0x07, 0x6b, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x74,
			0x04, 0x69, 0x6e, 0x66, 0x6f, 0x00,
			0x00, 0x01, 0x00, 0x01,
			// Answer
			0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01,
			0x00, 0x00, 0x01, 0x68,
			0x00, 0x04,
			0x67, 0xc8, 0x04, 0xa2,
			// OPT
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		exp: &Message{
			Header: MessageHeader{
				ID:      0x8cdb,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 1,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "kilabit.info",
				Type:  RecordTypeA,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "kilabit.info",
				Type:  RecordTypeA,
				Class: RecordClassIN,
				TTL:   0x00000168,
				rdlen: 4,
				rdata: []byte{0x67, 0xc8, 0x04, 0xa2},
				Value: "103.200.4.162",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 0x0500,
				TTL:   0,
				Value: &RDataOPT{},
			}},
		},
	}, {
		desc: "RR with NS",
		packet: []byte{
			// Header
			0xd4, 0xa6, 0x81, 0x80,
			0x00, 0x01, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x01,

			// Question
			0x07, 0x6b, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x74,
			0x04, 0x69, 0x6e, 0x66, 0x6f, 0x00,
			0x00, 0x02, 0x00, 0x01,

			// Answer #1 - NS IN
			0xc0, 0x0c,
			0x00, 0x02, 0x00, 0x01,
			0x00, 0x01, 0x33, 0x6e,
			0x00, 0x11,
			0x03, 0x6e, 0x73, 0x32,
			0x07, 0x64, 0x65, 0x77, 0x61, 0x77, 0x65, 0x62,
			0x03, 0x63, 0x6f, 0x6d, 0x00,

			// Answer #2
			0xc0, 0x0c,
			0x00, 0x02, 0x00, 0x01,
			0x00, 0x01, 0x33, 0x6e,
			0x00, 0x06,
			0x03, 0x6e, 0x73, 0x33, 0xc0, 0x2e,

			// Answer #3
			0xc0, 0x0c,
			0x00, 0x02, 0x00, 0x01,
			0x00, 0x01, 0x33, 0x6e,
			0x00, 0x06,
			0x03, 0x6e, 0x73, 0x31, 0xc0, 0x2e,

			// Additional OPT
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		exp: &Message{
			Header: MessageHeader{
				ID:      0xd4a6,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 3,
				NSCount: 0,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "kilabit.info",
				Type:  RecordTypeNS,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "kilabit.info",
				Type:  RecordTypeNS,
				Class: RecordClassIN,
				TTL:   0x01336e,
				rdlen: 0x11,
				rdata: []byte{
					0x03, 0x6e, 0x73, 0x32, 0x07, 0x64, 0x65, 0x77, 0x61, 0x77, 0x65, 0x62, 0x03, 0x63, 0x6f, 0x6d, 0x00,
				},
				Value: "ns2.dewaweb.com",
			}, {
				Name:  "kilabit.info",
				Type:  RecordTypeNS,
				Class: RecordClassIN,
				TTL:   0x01336e,
				rdlen: 6,
				rdata: []byte{
					0x03, 0x6e, 0x73, 0x33, 0xc0, 0x2e,
				},
				Value: "ns3.dewaweb.com",
			}, {
				Name:  "kilabit.info",
				Type:  RecordTypeNS,
				Class: RecordClassIN,
				TTL:   0x01336e,
				rdlen: 6,
				rdata: []byte{
					0x03, 0x6e, 0x73, 0x31, 0xc0, 0x2e,
				},
				Value: "ns1.dewaweb.com",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 0x0500,
				TTL:   0,
				Value: &RDataOPT{},
			}},
		},
	}, {
		desc: "RR with CNAME",
		packet: []byte{
			// Header
			0x8a, 0x38, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x01,

			// Question
			0x04, 0x6d, 0x61, 0x69, 0x6c,
			0x07, 0x6b, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x74,
			0x04, 0x69, 0x6e, 0x66, 0x6f, 0x00,
			0x00, 0x05, 0x00, 0x01,

			// Answer
			0xc0, 0x0c,
			0x00, 0x05, 0x00, 0x01,
			0x00, 0x00, 0x01, 0x68,
			0x00, 0x02,
			0xc0, 0x11,

			// Additional
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		exp: &Message{
			Header: MessageHeader{
				ID:      0x8a38,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 1,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "mail.kilabit.info",
				Type:  RecordTypeCNAME,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "mail.kilabit.info",
				Type:  RecordTypeCNAME,
				Class: RecordClassIN,
				TTL:   0x0168,
				rdlen: 2,
				rdata: []byte{0xc0, 0x11},
				Value: "kilabit.info",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 0x0500,
				TTL:   0,
				Value: &RDataOPT{},
			}},
		},
	}, {
		desc: "RR with SOA",
		packet: []byte{
			0x00, 0x02, 0x80, 0x80,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			// Question
			0x07, 0x6b, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x74,
			0x04, 0x69, 0x6e, 0x66, 0x6f, 0x00,
			0x00, 0x06, 0x00, 0x01,
			// Answer
			0xc0, 0x0c,
			0x00, 0x06, 0x00, 0x01,
			0x00, 0x00, 0x29, 0x0f,
			0x00, 0x38,
			// SOA
			0x03, 0x6e, 0x73, 0x31,
			0x07, 0x64, 0x65, 0x77, 0x61, 0x77, 0x65, 0x62,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
			0x08, 0x64, 0x65, 0x77, 0x61, 0x68, 0x6f, 0x73, 0x74,
			0xc0, 0x36,
			0x78, 0x3a, 0x3c, 0x85,
			0x00, 0x00, 0x0e, 0x10,
			0x00, 0x00, 0x1c, 0x20,
			0x00, 0x12, 0x75, 0x00,
			0x00, 0x01, 0x51, 0x80,
		},
		exp: &Message{
			Header: MessageHeader{
				ID:      2,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    false,
				IsRA:    true,
				QDCount: 1,
				ANCount: 1,
			},
			Question: MessageQuestion{
				Name:  "kilabit.info",
				Type:  RecordTypeSOA,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "kilabit.info",
				Type:  RecordTypeSOA,
				Class: RecordClassIN,
				TTL:   10511,
				rdlen: 56,
				rdata: []byte{
					0x03, 0x6e, 0x73, 0x31, 0x07, 0x64, 0x65, 0x77,
					0x61, 0x77, 0x65, 0x62, 0x03, 0x63, 0x6f, 0x6d,
					0x00, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
					0x72, 0x08, 0x64, 0x65, 0x77, 0x61, 0x68, 0x6f,
					0x73, 0x74, 0xc0, 0x36, 0x78, 0x3a, 0x3c, 0x85,
					0x00, 0x00, 0x0e, 0x10, 0x00, 0x00, 0x1c, 0x20,
					0x00, 0x12, 0x75, 0x00, 0x00, 0x01, 0x51, 0x80,
				},
				Value: &RDataSOA{
					MName:   "ns1.dewaweb.com",
					RName:   "monitor.dewahost.com",
					Serial:  2017082501,
					Refresh: 3600,
					Retry:   7200,
					Expire:  1209600,
					Minimum: 86400,
				},
			}},
			dnameOff: make(map[string]uint16),
		},
	}, {
		desc: "RR with MX",
		packet: []byte{
			0x9e, 0xef, 0x81, 0x80,
			0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01,
			// Question
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x0f, 0x00, 0x01,
			// Answer #1
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x11,
			0x00, 0x28,
			0x04, 0x61, 0x6c, 0x74, 0x33,
			0x05, 0x61, 0x73, 0x70, 0x6d, 0x78,
			0x01, 0x6c,
			0xc0, 0x0c,
			// Answer #2
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x04,
			0x00, 0x0a,
			0xc0, 0x2f,
			// Answer #3
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x09,
			0x00, 0x14,
			0x04, 0x61, 0x6c, 0x74, 0x31,
			0xc0, 0x2f,
			// Answer #4
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x09,
			0x00, 0x1e,
			0x04, 0x61, 0x6c, 0x74, 0x32,
			0xc0, 0x2f,
			// Answer #5
			0xc0, 0x0c,
			0x00, 0x0f, 0x00, 0x01,
			0x00, 0x00, 0x00, 0xfc,
			0x00, 0x09,
			0x00, 0x32,
			0x04, 0x61, 0x6c, 0x74, 0x34,
			0xc0, 0x2f,
			// OPT
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		exp: &Message{
			Header: MessageHeader{
				ID:      0x9eef,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 5,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				rdlen: 0x11,
				rdata: []byte{
					0x00, 0x28,
					0x04, 0x61, 0x6c, 0x74, 0x33,
					0x05, 0x61, 0x73, 0x70, 0x6d, 0x78,
					0x01, 0x6c,
					0xc0, 0x0c,
				},
				Value: &RDataMX{
					Preference: 0x28,
					Exchange:   "alt3.aspmx.l.google.com",
				},
			}, {
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				rdlen: 0x04,
				rdata: []byte{
					0x00, 0x0a,
					0xc0, 0x2f,
				},
				Value: &RDataMX{
					Preference: 0x0a,
					Exchange:   "aspmx.l.google.com",
				},
			}, {
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				rdlen: 0x09,
				rdata: []byte{
					0x00, 0x14,
					0x04, 0x61, 0x6c, 0x74, 0x31,
					0xc0, 0x2f,
				},
				Value: &RDataMX{
					Preference: 0x14,
					Exchange:   "alt1.aspmx.l.google.com",
				},
			}, {
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				rdlen: 0x09,
				rdata: []byte{
					0x00, 0x1e,
					0x04, 0x61, 0x6c, 0x74, 0x32,
					0xc0, 0x2f,
				},
				Value: &RDataMX{
					Preference: 0x1e,
					Exchange:   "alt2.aspmx.l.google.com",
				},
			}, {
				Name:  "google.com",
				Type:  RecordTypeMX,
				Class: RecordClassIN,
				TTL:   0x000000fc,
				rdlen: 0x09,
				rdata: []byte{
					0x00, 0x32,
					0x04, 0x61, 0x6c, 0x74, 0x34,
					0xc0, 0x2f,
				},
				Value: &RDataMX{
					Preference: 0x32,
					Exchange:   "alt4.aspmx.l.google.com",
				},
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 0x0500,
				TTL:   0,
				Value: &RDataOPT{},
			}},
		},
	}, {
		desc: "RR with TXT",
		packet: []byte{
			0x3f, 0x7d, 0x81, 0x80,
			0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
			// Question
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x10, 0x00, 0x01,
			// Answer #1
			0xc0, 0x0c,
			0x00, 0x10, 0x00, 0x01,
			0x00, 0x00, 0x01, 0x2c,
			0x00, 0x3c,
			0x3b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
			0x6b, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
			0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
			0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x32,
			0x72, 0x6d, 0x35, 0x35, 0x31, 0x63, 0x75, 0x34,
			0x6b, 0x30, 0x61, 0x62, 0x30, 0x62, 0x78, 0x73,
			0x77, 0x35, 0x33, 0x36, 0x74, 0x6c, 0x64, 0x73,
			0x34, 0x68, 0x39, 0x35,
			// Answer #2
			0xc0, 0x0c,
			0x00, 0x10, 0x00, 0x01,
			0x00, 0x00, 0x01, 0x2c,
			0x00, 0x24,
			0x23, 0x76, 0x3d, 0x73, 0x70, 0x66, 0x31, 0x20,
			0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x3a,
			0x5f, 0x73, 0x70, 0x66, 0x2e, 0x67, 0x6f, 0x6f,
			0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20,
			0x7e, 0x61, 0x6c, 0x6c,
			// Answer #3
			0xc0, 0x0c,
			0x00, 0x10, 0x00, 0x01,
			0x00, 0x00, 0x01, 0x2c,
			0x00, 0x2e,
			0x2d, 0x64, 0x6f, 0x63, 0x75, 0x73, 0x69, 0x67,
			0x6e, 0x3d, 0x30, 0x35, 0x39, 0x35, 0x38, 0x34,
			0x38, 0x38, 0x2d, 0x34, 0x37, 0x35, 0x32, 0x2d,
			0x34, 0x65, 0x66, 0x32, 0x2d, 0x39, 0x35, 0x65,
			0x62, 0x2d, 0x61, 0x61, 0x37, 0x62, 0x61, 0x38,
			0x61, 0x33, 0x62, 0x64, 0x30, 0x65,
			// OPT RR
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		exp: &Message{
			Header: MessageHeader{
				ID:      16253,
				IsQuery: false,
				Op:      OpCodeQuery,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 3,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "google.com",
				Type:  RecordTypeTXT,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "google.com",
				Type:  RecordTypeTXT,
				Class: RecordClassIN,
				TTL:   300,
				rdlen: 60,
				rdata: []byte{
					0x3b, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
					0x6b, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
					0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
					0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x32,
					0x72, 0x6d, 0x35, 0x35, 0x31, 0x63, 0x75, 0x34,
					0x6b, 0x30, 0x61, 0x62, 0x30, 0x62, 0x78, 0x73,
					0x77, 0x35, 0x33, 0x36, 0x74, 0x6c, 0x64, 0x73,
					0x34, 0x68, 0x39, 0x35,
				},
				Value: "facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95",
			}, {
				Name:  "google.com",
				Type:  RecordTypeTXT,
				Class: RecordClassIN,
				TTL:   300,
				rdlen: 36,
				rdata: []byte{
					0x23, 0x76, 0x3d, 0x73, 0x70, 0x66, 0x31, 0x20,
					0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x3a,
					0x5f, 0x73, 0x70, 0x66, 0x2e, 0x67, 0x6f, 0x6f,
					0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20,
					0x7e, 0x61, 0x6c, 0x6c,
				},
				Value: "v=spf1 include:_spf.google.com ~all",
			}, {
				Name:  "google.com",
				Type:  RecordTypeTXT,
				Class: RecordClassIN,
				TTL:   300,
				rdlen: 46,
				rdata: []byte{
					0x2d, 0x64, 0x6f, 0x63, 0x75, 0x73, 0x69, 0x67,
					0x6e, 0x3d, 0x30, 0x35, 0x39, 0x35, 0x38, 0x34,
					0x38, 0x38, 0x2d, 0x34, 0x37, 0x35, 0x32, 0x2d,
					0x34, 0x65, 0x66, 0x32, 0x2d, 0x39, 0x35, 0x65,
					0x62, 0x2d, 0x61, 0x61, 0x37, 0x62, 0x61, 0x38,
					0x61, 0x33, 0x62, 0x64, 0x30, 0x65,
				},
				Value: "docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 1280,
				TTL:   0,
				rdlen: 0,
				Value: &RDataOPT{},
			}},
			dnameOff: make(map[string]uint16),
		},
	}, {
		desc: "RR with AAAA",
		packet: []byte{
			0x2c, 0x90, 0x81, 0x80,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
			// Question
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x1c, 0x00, 0x01,
			// Answer
			0xc0, 0x0c,
			0x00, 0x1c, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x53,
			0x00, 0x10,
			0x24, 0x04, 0x68, 0x00, 0x40, 0x03, 0x0c, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b,
			// OPT
			0x00, 0x00, 0x29, 0x05, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		exp: &Message{
			Header: MessageHeader{
				ID:      0x2c90,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 1,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "google.com",
				Type:  RecordTypeAAAA,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "google.com",
				Type:  RecordTypeAAAA,
				Class: RecordClassIN,
				TTL:   0x53,
				rdlen: 16,
				rdata: []byte{
					0x24, 0x04, 0x68, 0x00, 0x40, 0x03, 0x0c, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b,
				},
				Value: "2404:6800:4003:c00::8b",
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 1280,
				TTL:   0,
				rdlen: 0,
				Value: &RDataOPT{},
			}},
		},
	}, {
		desc: "RR with SRV",
		packet: []byte{
			0x2c, 0xb4,
			0x81, 0x80,
			0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01,
			// Question
			0x0c, 0x5f, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x04, 0x5f, 0x74, 0x63, 0x70,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x21, 0x00, 0x01,
			// Answer #1
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x20,
			0x00, 0x05, 0x00, 0x00, 0x14, 0x95,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// Answer #2
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x25,
			0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
			0x04, 0x61, 0x6c, 0x74, 0x31,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// Answer #3
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x25,
			0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
			0x04, 0x61, 0x6c, 0x74, 0x32,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// Answer #4
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x25,
			0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
			0x04, 0x61, 0x6c, 0x74, 0x34,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// Answer #5
			0xc0, 0x0c,
			0x00, 0x21, 0x00, 0x01,
			0x00, 0x00, 0x02, 0x31,
			0x00, 0x25,
			0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
			0x04, 0x61, 0x6c, 0x74, 0x33,
			0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
			0x01, 0x6c,
			0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
			0x03, 0x63, 0x6f, 0x6d, 0x00,
			// OPT
			0x00, 0x00, 0x29, 0x02, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		exp: &Message{
			Header: MessageHeader{
				ID:      0x2cb4,
				IsRD:    true,
				IsRA:    true,
				QDCount: 1,
				ANCount: 5,
				ARCount: 1,
			},
			Question: MessageQuestion{
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
			},
			Answer: []ResourceRecord{{
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				rdlen: 0x20,
				rdata: []byte{
					0x00, 0x05, 0x00, 0x00, 0x14, 0x95,
					0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
					0x01, 0x6c,
					0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
					0x03, 0x63, 0x6f, 0x6d, 0x00,
				},
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x5,
					Weight:   0,
					Port:     0x1495,
					Target:   "xmpp-server.l.google.com",
				},
			}, {
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				rdlen: 0x25,
				rdata: []byte{
					0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
					0x04, 0x61, 0x6c, 0x74, 0x31,
					0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
					0x01, 0x6c,
					0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
					0x03, 0x63, 0x6f, 0x6d, 0x00,
				},
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x14,
					Weight:   0,
					Port:     0x1495,
					Target:   "alt1.xmpp-server.l.google.com",
				},
			}, {
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				rdlen: 0x25,
				rdata: []byte{
					0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
					0x04, 0x61, 0x6c, 0x74, 0x32,
					0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
					0x01, 0x6c,
					0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
					0x03, 0x63, 0x6f, 0x6d, 0x00,
				},
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x14,
					Weight:   0,
					Port:     0x1495,
					Target:   "alt2.xmpp-server.l.google.com",
				},
			}, {
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				rdlen: 0x25,
				rdata: []byte{
					0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
					0x04, 0x61, 0x6c, 0x74, 0x34,
					0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
					0x01, 0x6c,
					0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
					0x03, 0x63, 0x6f, 0x6d, 0x00,
				},
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x14,
					Weight:   0,
					Port:     0x1495,
					Target:   "alt4.xmpp-server.l.google.com",
				},
			}, {
				Name:  "_xmpp-server._tcp.google.com",
				Type:  RecordTypeSRV,
				Class: RecordClassIN,
				TTL:   0x231,
				rdlen: 0x25,
				rdata: []byte{
					0x00, 0x14, 0x00, 0x00, 0x14, 0x95,
					0x04, 0x61, 0x6c, 0x74, 0x33,
					0x0b, 0x78, 0x6d, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
					0x01, 0x6c,
					0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
					0x03, 0x63, 0x6f, 0x6d, 0x00,
				},
				Value: &RDataSRV{
					Service:  "_xmpp-server",
					Proto:    "_tcp",
					Name:     "google.com",
					Priority: 0x14,
					Weight:   0,
					Port:     0x1495,
					Target:   "alt3.xmpp-server.l.google.com",
				},
			}},
			Additional: []ResourceRecord{{
				Type:  RecordTypeOPT,
				Class: 512,
				TTL:   0,
				rdlen: 0,
				Value: &RDataOPT{},
			}},
		},
	}}

	msg := NewMessage()

	for _, c := range cases {
		t.Log(c.desc)

		msg.Reset()
		msg.packet = c.packet

		err := msg.Unpack()
		if err != nil {
			t.Fatal(err)
		}

		test.Assert(t, "Header", c.exp.Header, msg.Header)
		test.Assert(t, "Question", c.exp.Question, msg.Question)
		test.Assert(t, "Answer Length", len(c.exp.Answer), len(msg.Answer))
		test.Assert(t, "Authority Length", len(c.exp.Authority), len(msg.Authority))
		test.Assert(t, "Additional Length", len(c.exp.Additional), len(msg.Additional))

		for x := 0; x < len(c.exp.Answer); x++ {
			test.Assert(t, "Answer.Name", c.exp.Answer[x].Name, msg.Answer[x].Name)
			test.Assert(t, "Answer.Type", c.exp.Answer[x].Type, msg.Answer[x].Type)
			test.Assert(t, "Answer.Class", c.exp.Answer[x].Class, msg.Answer[x].Class)
			test.Assert(t, "Answer.TTL", c.exp.Answer[x].TTL, msg.Answer[x].TTL)
			test.Assert(t, "Answer.rdlen", c.exp.Answer[x].rdlen, msg.Answer[x].rdlen)
			test.Assert(t, "Answer.rdata", c.exp.Answer[x].rdata, msg.Answer[x].rdata)
			test.Assert(t, "Answer.Value", c.exp.Answer[x].Value, msg.Answer[x].Value)
		}
		for x := 0; x < len(c.exp.Authority); x++ {
			test.Assert(t, "Authority.Name", c.exp.Authority[x].Name, msg.Authority[x].Name)
			test.Assert(t, "Authority.Type", c.exp.Authority[x].Type, msg.Authority[x].Type)
			test.Assert(t, "Authority.Class", c.exp.Authority[x].Class, msg.Authority[x].Class)
			test.Assert(t, "Authority.TTL", c.exp.Authority[x].TTL, msg.Authority[x].TTL)
			test.Assert(t, "Authority.rdlen", c.exp.Authority[x].rdlen, msg.Authority[x].rdlen)
			test.Assert(t, "Authority.rdata", c.exp.Authority[x].rdata, msg.Authority[x].rdata)
			test.Assert(t, "Authority.Value", c.exp.Authority[x].Value, msg.Authority[x].Value)
		}
		for x := 0; x < len(c.exp.Additional); x++ {
			test.Assert(t, "Additional.Name", c.exp.Additional[x].Name, msg.Additional[x].Name)
			test.Assert(t, "Additional.Type", c.exp.Additional[x].Type, msg.Additional[x].Type)
			test.Assert(t, "Additional.Class", c.exp.Additional[x].Class, msg.Additional[x].Class)
			test.Assert(t, "Additional.TTL", c.exp.Additional[x].TTL, msg.Additional[x].TTL)
			test.Assert(t, "Additional.rdlen", c.exp.Additional[x].rdlen, msg.Additional[x].rdlen)
			test.Assert(t, "Additional.rdata", c.exp.Additional[x].rdata, msg.Additional[x].rdata)
			test.Assert(t, "Additional.Value", c.exp.Additional[x].Value, msg.Additional[x].Value)
		}
	}
}
